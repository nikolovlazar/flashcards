{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Distributed Tracing in Next.js",
  "steps": [
    {
      "title": "Introduction",
      "description": "## Welcome to Distributed Tracing in Next.js!\n\nLet's help you set up the project first, and then we'll go through the implementation.\n\nIf you haven't already, [sign up for a free Sentry account](https://sentry.io/signup) and create a new project.\n\nIf you're ready, check out the [README](./README.md) file and follow the instructions to set up this project. When you're done, click on the Next button to proceed to the next step."
    },
    {
      "file": "src/hooks/flashcards.ts",
      "description": "## Distributed tracing starts with a trace.\n\nA trace is a log of events that occured during a program's execution, which in this case it's the Update Flashcard flow. Every trace also composed of at least one transaction. A transaction on the other hand describes the operations that happened within the entity where it's created. We're currently in a file that defines the React hooks for the flashcards, so the transaction above is created on the frontend (browser) and it's only going to capture the operations that happen within the browser.\n\nWe also set the newly created transaction as the span on the current scope, so it captures every operation while this scope is alive.",
      "line": 91,
      "title": "Creating a new transaction"
    },
    {
      "file": "src/hooks/flashcards.ts",
      "description": "Each transaction can also have child spans that can either be a mark span like the one above, or wrap around a smaller functionality that we'd like to measure.",
      "line": 98,
      "title": "Creating a child span"
    },
    {
      "file": "src/hooks/flashcards.ts",
      "description": "This is an optional step because it happens automatically in the background, but I'll leave it here to help me illustrate my point. In order to \"distribute\" the trace we'd need to pass the `trace-id` to the backend through the `sentry-trace` header. This is a crucial step because it's how we tell the backend's transaction to hook onto this trace.\n\nLet's jump to the backend and do some tracing there as well.",
      "line": 106,
      "title": "Passing the trace-id to the backend",
      "selection": {
        "start": {
          "line": 3,
          "character": 47
        },
        "end": {
          "line": 3,
          "character": 61
        }
      }
    },
    {
      "file": "pages/api/flashcards/[slug].ts",
      "description": "A new transaction automatically gets created on the backend, and since we're passing the `sentry-trace` in the headers, it automatically gets attached to the ongoing trace. We can obtain that transaction by calling the `getTransaction()` method of the current scope.\n\n> ℹ️ I don't have it here, but it's a good idea to make sure that a transaction exists before using it. If the `transaction` is null, manually create it and add set it as a span to the current scope.\n\n",
      "line": 38,
      "title": "Automatically created transactions"
    },
    {
      "file": "pages/api/flashcards/[slug].ts",
      "description": "We can use the transaction as we would a manually created one. We can start child spans just like we do here to measure specific functionalities within our backend.",
      "line": 45,
      "title": "Using the automatic transaction"
    },
    {
      "file": "prisma/helpers.ts",
      "description": "It's also possible to instrument the database requests. We're using this `getFlashcard` method back in our API handler file to get the flashcard from the databse. In order to automatically instrument all database calls, we need to add the Prisma integration in the `sentry.server.config.js` file. Click next to see how we can do that.",
      "line": 19,
      "title": "Instrumenting database calls"
    },
    {
      "file": "sentry.server.config.js",
      "description": "We can enable automatically instrumenting the Prisma requests by adding the built-in Prisma integration. This integration is an opt-in integration, meaning it's not enabled by default because not every project uses Prisma. You can check out our [Integrations page](https://docs.sentry.io/platforms/javascript/guides/nextjs/configuration/integrations/) to see a list of every available integration.",
      "line": 18,
      "title": "Adding Sentry integrations"
    },
    {
      "file": "pages/api/flashcards/[slug].ts",
      "description": "Child spans can also have a status. In this case we're manually setting the status to the `'not_found'`. To see a list of the values, open the [Span Interface](https://develop.sentry.dev/sdk/event-payloads/span/) page in our docsite.",
      "line": 49,
      "title": "Setting the status of the child spans"
    },
    {
      "file": "pages/api/flashcards/[slug].ts",
      "description": "If we're using the automatically created transaction we don't need to call the `.finish()` method on it. We can send a response back to the client straight away. And since the `sentry-trace` header gets added automatically, we won't need to manually set it here in order to continue the trace back to the client side.",
      "line": 96,
      "title": "Sending the response back to the client"
    },
    {
      "file": "src/hooks/flashcards.ts",
      "description": "Back to the client! Since we're back at the same place, we don't need to create a new transaction, or obtain it from the current scope. We already have the main one from before, so we can continue using that one to create child spans.",
      "line": 120,
      "title": "Continuing on the client side"
    },
    {
      "file": "src/hooks/flashcards.ts",
      "description": "At the end, we must not forget to call the `.finish()` method on our transaction and any child spans that are still measuring. This is the moment when the transaction and its data gets uploaded to Sentry, so if we forget to do this we won't see anything in our dashboard. Also, every child span must be `.finish()`-ed before its parent.\n\nThis is how to start a transaction in one environment (client), distribute it to another (backend, database), and bring it back to the first one. This is distributed tracing! If we run the app now and update a few flashcards, we'll see our \"Updating flashcard\" transaction in the Performance page in Sentry. Go ahead and try it out!\n\nAnd that's it for this code tour! Hope you learned how to implement distributed tracing in Next.js.",
      "line": 138,
      "title": "Finishing the transaction and child spans"
    }
  ],
  "ref": "main"
}